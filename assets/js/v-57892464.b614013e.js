"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[460],{647:(t,d,e)=>{e.r(d),e.d(d,{data:()=>r});const r=JSON.parse('{"key":"v-57892464","path":"/IT/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"设计模式","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"资源","slug":"资源","children":[]},{"level":2,"title":"准则","slug":"准则","children":[]},{"level":2,"title":"目的","slug":"目的","children":[]},{"level":2,"title":"创建型模式","slug":"创建型模式","children":[]},{"level":2,"title":"结构性模式","slug":"结构性模式","children":[]},{"level":2,"title":"行为模式","slug":"行为模式","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"IT/设计模式.md"}')},612:(t,d,e)=>{e.r(d),e.d(d,{default:()=>l});var r=e(252);const a=[(0,r.uE)('<h1 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h1><h2 id="资源" tabindex="-1"><a class="header-anchor" href="#资源" aria-hidden="true">#</a> 资源</h2><blockquote><p>参考资源内容：</p><p>https://www.runoob.com/design-pattern/design-pattern-tutorial.html</p><p>https://refactoringguru.cn/design-patterns</p></blockquote><h2 id="准则" tabindex="-1"><a class="header-anchor" href="#准则" aria-hidden="true">#</a> 准则</h2><blockquote><ul><li>七大设计原则核心思想 <ol><li>单一职责</li><li>接口隔离</li><li>依赖倒转</li><li>里氏替换</li><li>开闭原则</li><li>迪米特法则</li><li>合成复用</li></ol></li><li>能以类图说明设计原则</li><li>项目实际开发过程，使用OCP（开闭）原则</li></ul></blockquote><h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的" aria-hidden="true">#</a> 目的</h2><blockquote><ol><li>代码复用性（即：相同的代码，不用多次编写）</li><li>可读性（即：代码的规范，便于阅读与理解）</li><li>可拓展性（即：增加新功能时非常方便，称为可维护）</li><li>可靠性（即：当我们增加新功能后，对原来的功能没有影响）</li><li>使得程序呈高内聚、低耦合</li></ol></blockquote><h2 id="创建型模式" tabindex="-1"><a class="header-anchor" href="#创建型模式" aria-hidden="true">#</a> 创建型模式</h2><blockquote><p>提供创建对象的机制，提升已有代码的灵活性与复用性</p><p>创建者模式包括：⼯⼚⽅法、抽象⼯⼚、⽣成器、原型、单例，这5类</p></blockquote><table><thead><tr><th>类型</th><th>图稿</th><th>场景</th><th>重点</th></tr></thead><tbody><tr><td>工厂方法</td><td><img src="https://gitee.com/hedywqy/PicGo/raw/master/Typora/20220124145855.png" alt="img"></td><td>多种类型商品不同接口，统一发奖服务接口</td><td>定义一个创建对象接口，让其自类自己决定具体实例化哪一个工厂。工厂模式使其创建过程延迟到子类进行</td></tr><tr><td>抽象工厂</td><td><img src="https://gitee.com/hedywqy/PicGo/raw/master/Typora/20220124152806.png" alt="img"></td><td>代理类抽象场景</td><td>提供⼀个创建⼀系列相关或相互依赖对象的接⼝，⽽⽆需指定它们具体的类。</td></tr><tr><td>建造者</td><td><img src="https://gitee.com/hedywqy/PicGo/raw/master/Typora/20220124152926.png" alt="img"></td><td>各项装修物料组合套餐选配场景</td><td>将⼀个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</td></tr><tr><td>原型</td><td><img src="https://gitee.com/hedywqy/PicGo/raw/master/Typora/20220124153016.png" alt="img"></td><td>上机考试多套试，每⼈题⽬和答案乱序</td><td>⽤原型实例指定创建对象的种类，并且通过拷⻉这些原型创建新的对象。</td></tr><tr><td>单例</td><td><img src="https://gitee.com/hedywqy/PicGo/raw/master/Typora/20220124153042.png" alt="img"></td><td>7种单例模式案例，推荐：枚举单例模式</td><td>保证⼀个类仅有⼀个实例，并提供⼀个访问它的全局访问点。</td></tr></tbody></table><hr><h2 id="结构性模式" tabindex="-1"><a class="header-anchor" href="#结构性模式" aria-hidden="true">#</a> 结构性模式</h2><blockquote><p>将对象和类组装成较大的结构，并同时保持结构的灵活和高效</p><p>结构型模式包括：适配器、桥接、组合、装饰器、外观、享元、代理，这7类。</p></blockquote><table><thead><tr><th>类型</th><th>图稿</th><th>场景</th><th>重点</th></tr></thead><tbody><tr><td>适配器</td><td>![image-20220216151710508](C:\\Users\\Thomas Wong\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220216151710508.png)</td><td>从多个MQ消息体中，抽取指定字段值场景</td><td>将⼀个类的接⼝转换成客户希望的另外⼀个接⼝。适配器模式使得原本由于接⼝不兼容⽽不能⼀起⼯作的那些类可以⼀起⼯作</td></tr><tr><td>桥接</td><td>![image-20220216180356766](C:\\Users\\Thomas Wong\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220216180356766.png)</td><td>多⽀付渠道(微信、⽀付宝)与多⽀付模式(刷脸、指纹)场景</td><td>将抽象部分与实现部分分离，使它们都可以独⽴的变化。</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><hr><h2 id="行为模式" tabindex="-1"><a class="header-anchor" href="#行为模式" aria-hidden="true">#</a> 行为模式</h2><blockquote><p>负责对象间的高效沟通，和职责委派</p><p>⾏为模式包括：责任链、命令、迭代器、中介者、备忘录、观察者、状态、策略、模板、访问者，这10</p><p>类。</p></blockquote><table><thead><tr><th>类型</th><th>图稿</th><th>场景</th><th>重点</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p>a</p><hr>',20)],i={},l=(0,e(744).Z)(i,[["render",function(t,d){return(0,r.wg)(),(0,r.iD)("div",null,a)}]])}}]);